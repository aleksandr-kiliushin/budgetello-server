# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ActivityCategory {
  board: Board!
  id: Int!
  measurementType: ActivityCategoryMeasurementType!
  name: String!
  owner: User!
  unit: String
}

type ActivityCategoryMeasurementType {
  id: Int!
  name: String!
}

type ActivityRecord {
  booleanValue: Boolean
  category: ActivityCategory!
  comment: String!
  date: String!
  id: Int!
  quantitativeValue: Float
}

input AddMemberInput {
  boardId: Int!
  userId: Int!
}

type Board {
  admins: [User!]!
  defaultCurrency: Currency
  id: Int!
  members: [User!]!
  name: String!
  subject: BoardSubject!
}

type BoardSubject {
  id: Int!
  name: String!
}

type BudgetCategory {
  board: Board!
  id: Int!
  name: String!
  type: BudgetCategoryType!
}

type BudgetCategoryType {
  id: Int!
  name: String!
}

type BudgetRecord {
  amount: Float!
  author: User!
  category: BudgetCategory!
  currency: Currency!
  date: String!
  id: Int!
  isTrashed: Boolean!
}

input CreateActivityCategoryInput {
  boardId: Int!
  measurementTypeId: Int!
  name: String!
  unit: String
}

input CreateActivityRecordInput {
  booleanValue: Boolean
  categoryId: Int!
  comment: String!
  date: String!
  quantitativeValue: Float
}

input CreateAuthorizationTokenInput {
  password: String!
  username: String!
}

input CreateBoardInput {
  defaultCurrencySlug: String
  name: String!
  subjectId: Int!
}

input CreateBudgetCategoryInput {
  boardId: Int!
  name: String!
  typeId: Int!
}

input CreateBudgetRecordInput {
  amount: Float!
  categoryId: Int!
  currencySlug: String!
  date: String!
}

input CreateUserInput {
  password: String!
  passwordConfirmation: String!
  username: String!
}

type Currency {
  name: String!
  slug: String!
  symbol: String!
}

type Mutation {
  addBoardMember(input: AddMemberInput!): Board!
  createActivityCategory(input: CreateActivityCategoryInput!): ActivityCategory!
  createActivityRecord(input: CreateActivityRecordInput!): ActivityRecord!
  createAuthorizationToken(input: CreateAuthorizationTokenInput!): String!
  createBoard(input: CreateBoardInput!): Board!
  createBudgetCategory(input: CreateBudgetCategoryInput!): BudgetCategory!
  createBudgetRecord(input: CreateBudgetRecordInput!): BudgetRecord!
  createUser(input: CreateUserInput!): User!
  deleteActivityCategory(id: Int!): ActivityCategory!
  deleteActivityRecord(id: Int!): ActivityRecord!
  deleteBoard(id: Int!): Board!
  deleteBudgetCategory(id: Int!): BudgetCategory!
  deleteBudgetRecord(id: Int!): BudgetRecord!
  deleteUser(id: Int!): User!
  removeBoardMember(input: RemoveMemberInput!): Board!
  updateActivityCategory(input: UpdateActivityCategoryInput!): ActivityCategory!
  updateActivityRecord(input: UpdateActivityRecordInput!): ActivityRecord!
  updateBoard(input: UpdateBoardInput!): Board!
  updateBudgetCategory(input: UpdateBudgetCategoryInput!): BudgetCategory!
  updateBudgetRecord(input: UpdateBudgetRecordInput!): BudgetRecord!
  updateUser(input: UpdateUserInput!): User!
}

type Query {
  activityCategories(boardsIds: [Int!], ids: [Int!], ownersIds: [Int!]): [ActivityCategory!]!
  activityCategory(id: Int!): ActivityCategory!
  activityCategoryMeasurementType(id: Int!): ActivityCategoryMeasurementType!
  activityCategoryMeasurementTypes: [ActivityCategoryMeasurementType!]!
  activityRecord(id: Int!): ActivityRecord!
  activityRecords(boardsIds: [Int!], categoriesIds: [Int!], dates: [String!], ids: [Int!], orderingByDate: String, orderingById: String, skip: Int, take: Int): [ActivityRecord!]!
  board(id: Int!): Board!
  boardSubject(id: Int!): BoardSubject!
  boardSubjects: [BoardSubject!]!
  boards(iAmAdminOf: Boolean, iAmMemberOf: Boolean, ids: [Int!], name: String, subjectsIds: [Int!]): [Board!]!
  budgetCategories(boardsIds: [Int!], ids: [Int!], orderingById: String, orderingByType: String): [BudgetCategory!]!
  budgetCategory(id: Int!): BudgetCategory!
  budgetCategoryType(id: Int!): BudgetCategoryType!
  budgetCategoryTypes: [BudgetCategoryType!]!
  budgetRecord(id: Int!): BudgetRecord!
  budgetRecords(amount: Float, boardsIds: [Int!], categoriesIds: [Int!], currenciesSlugs: [String!], dates: [String!], ids: [Int!], isTrashed: Boolean, orderingByDate: String, orderingById: String, skip: Int, take: Int): [BudgetRecord!]!
  currencies: [Currency!]!
  currency(slug: String!): Currency!
  user(id: Int, username: String): User!
  users(ids: [Int!], username: String): [User!]!
}

input RemoveMemberInput {
  boardId: Int!
  memberId: Int!
}

input UpdateActivityCategoryInput {
  boardId: Int
  id: Int!
  measurementTypeId: Int
  name: String
  unit: String
}

input UpdateActivityRecordInput {
  booleanValue: Boolean
  categoryId: Int
  comment: String
  date: String
  id: Int!
  quantitativeValue: Float
}

input UpdateBoardInput {
  defaultCurrencySlug: String
  id: Int!
  name: String
  subjectId: Int
}

input UpdateBudgetCategoryInput {
  boardId: Int
  id: Int!
  name: String
  typeId: Int
}

input UpdateBudgetRecordInput {
  amount: Float
  categoryId: Int
  currencySlug: String
  date: String
  id: Int!
  isTrashed: Boolean
}

input UpdateUserInput {
  id: Int!
  password: String
  passwordConfirmation: String
  username: String
}

type User {
  administratedBoards: [Board!]!
  id: Int!
  participatedBoards: [Board!]!
  password: String!
  username: String!
}